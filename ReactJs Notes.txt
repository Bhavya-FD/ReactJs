* Working with ReactJs :

step1 - Install NodeJs
nodejs :- Environment of javascript - using of node we can execute and run js files which provide npm & npx

npm  :- node package manager - npm is a tool using which we can install packages

npx :- node package executer - using of npx we can execute packages

-----------------------------------------------------------------------------------
LTS :- long term support

need to check version of node js

node -v   : tells version of node js

npm-v   : tells version of npm
------------------------------------------------------------------
*react installation for project creation  (Traditional Method)

npm install create-react-app    	              // install in a folder
	
npm install -g create-react-app    	           // install in a folder but works globally

npx create-react-app  <projectname>

cd projectname   (cd means change directory)

npm start
---------------------------------------------------
*latest react project creation : steps to create a new project using latest method

npm create vite
or
npm create vite@latest

project name : projectname
package name : projectname

Select a Framework : React
Select a Variant : Javascript + SWC

cd projectname    (cd means change Directories)

npm install

npm run dev
-----------------------------------------------------
Create React App(CRA) :- It offers a modern build setup with no Configuration
	but it Increased development & buid time when the project size increases

Vite : it is next-Generation, forntend tool that focuses on speed & performence

It focuses on two major parts :
1) A development server
2) A build Command

SWC (Speedy Web Compiler)  :-  is an extensible Rust-based platform for the next generation of fast developer tools. It's used by tools like Next.js, Parcel etc.

------------------------------------------------------------------------------------------------------------------
package.json  : Which main Configuration file of the project which contain install packages (dependency) name and version name

"dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }

package_lock.json : contain all the detail Information of Install dependencies

index.html : Main render file.

---------------------------------------------------------------------------------------------
Components : Components are block of code(piece of code). which we can reuse.
	It is Combination of HTML, CSS, javascript.
	Using of Components we can build UI easily.
	React is all about Componenets, single resposibility

Types of Components :
1) Function Components : Simple javascript Function
2) Class Components : ES6 classes to create class Components. class Components little more complex than Function Components.

e.g. of Components :  <App/>

ReactDOM : using of ReactDOM we can render Components and elements on Browser.

jsx (javascript XML) : javascript  allow us to write html element in javascript.
		jsx convert html tags in react element.

-----------------------------------------------------------------------------------------------------------------------------------------------------    
in App.jsx to include html Components : 

rfc(React Function Component)

export default function App(){
	return(
	            <div>
	                   <h1>Hello<h1/>
	                   <h1>Hello<h1/>
	           <div/>
	)
}
--------------------------------------------------------------------------------------
index.html
  |
 V
Main.jsx
 	=>App.jsx
		=>rest of the Components(start with capitals)

------------------------------------------------------------------------------
State : State is a behaviour of Component
	It is Mutable property(we can change it)
	
	for   car- color - black          at purchase
	
	         car - color - white         at delivery
	
	Here, we are changing state of car color
-------------------------------------------------------------------------------
Components : There are two types of Components

	1) Function Component : easy to understand
		in Function Component there is direct return jsx
	
	2) Class Component : It is complex to use - It is Inherited by Component class
		Class Component have render() method which return jsx

-------------------------------------------------------------------------------------
Spread Operator : to Combine Multiple Array in single array, its called spread operator which is denoted by ...(dot operator/spread operator)

var myArray = ["C","C++","ReactJs","Python"]
console.log(myArray);            //output : ['C', 'C++', 'ReactJs', 'Python']
var newArray = [...myArray]
console.log(newArray);              //output : ['C', 'C++', 'ReactJs', 'Python']
var newArray = [...myArray,"MernStack"]
console.log(newArray);                  //output : ['C', 'C++', 'ReactJs', 'Python', 'MernStack']

------------------------------------------------------------------------
props : property of Component

	using of props we can data from Parent Component to Child Component.

	props are immutable (we can't change its value)

	<ChildComponent key = "value" />
-------------------------------------------------------------------------
	Hooks
Hook is a Special function. with the help of hook function we can manage many state of function component and manage lifecycle of function component.

	There are many popular hooks available  for example  : useState() , useEffect() , useContext() and many more....

---------------------------------------------------------------------------------------------
useEffect  : useEffect is a most popular hook function.
	using of useEffect we can control side effect of function component.
	
	for example : api fetching , render specific code when specific event occur

 	Syntax : 
		useEffect(callback,dependencies)

	when we don't pass any dependencies it will run useEffect every time.
---------------------------------------------------------------------------------------------
useRef  : useRef is one of the most popular hook in ReactJs.
	
	It refer a specific Conponent.
	e.g.   on button click we can focus on input box
--------------------------------------------------------------------------------------
UseContext : manage globally state

			it Content two property : 

			createContext() : using of createContext we can create context globally

			useContext(contextName) : we can use specific context by any Component

			context.provider : which allow specific Component to specific context
----------------------------------------------------------------------------------
Install ReactStrap for Styling in reactJs : 

	npm install reactstrap react react-dom

Include Css link : 

	<head>
 	      <link   rel="stylesheet"   href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css"/>
	</head>

--------------------------------------------------------------------------------
Install Material UI for Styling in ReactJs : 

	npm install @mui/material @emotion/react @emotion/styled

----------------------------------------------------------------------
Install Material UI icons in ReactJs : 

	npm install @mui/icons-material





